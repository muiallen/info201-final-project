}
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_detect(my_vector, "[:digit:]")) {
print("Oh no!")
} else {
print("Yay!")
}
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_detect(my_vector, "[:digit:]")) {
print("Oh no!")
} else {
print("Yay!")
}
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_detect(my_vector, "[:digit:]")) {
print("Oh no!")
} else {
print("Yay!")
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
my_vector <- c("INFO 201", "CSE 142", "mps-803c")
RemoveDigits(my_vector)
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_detect(my_vector, "[:digit:]")) {
print("Oh no!")
} else {
print("Yay!")
}
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_detect(my_vector, "[:digit:]")) {
print("Oh no!")
} else {
print("Yay!")
}
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_detect(my_vector[1:length(my_vector)], "[:digit:]")) {
print("Oh no!")
} else {
print("Yay!")
}
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_detect(my_vector, "[:digit:]") > 1) {
print("Oh no!")
} else {
print("Yay!")
}
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_detect(my_vector, "[:digit:]") = TRUE) {
print("Oh no!")
} else {
print("Yay!")
}
iris_df <- data.frame(iris)
View(iris_df)
# Select all values of data frame for Sepal.length
iris_df$Sepal.Length
# Select only rows of Virginica flowers
iris_df[iris_df$Species = "virginica"]
# Select only rows of Virginica flowers
iris_df[iris_df$Species.eq("virginica")]
# Select only rows of Virginica flowers
iris_df[, "virginica"]
# Select only rows of Virginica flowers
iris_df$Species
# Select only rows of Virginica flowers
iris_df$Species"virginica"
# Select only rows of Virginica flowers
iris_df[$Species, "virginica"]
# Select only rows of Virginica flowers
iris_df[Species, "virginica"]
# Select only rows of Virginica flowers
iris_df['Species, "virginica"]
# Select only rows of Virginica flowers
iris_df['Species, "virginica"]
# Select only rows of Virginica flowers
iris_df['Species', "virginica"]
install.packages("babynames")
library(babynames)
head(babynames)
tail(babynames)
boys <- babynames[babynames$sex == "M"]
boys <- babynames[babynames$sex == "M",]
boys <- with(babynames, babynames[sex == "M",])
a <- c(1,2,5,4,2)
max(a)
which(a)
which.max(a)
subset <-with(babynames, babynames[year==1998&sex=="M", ])with(subset, name[which.max(n)])
subset <-with(babynames, babynames[year==1998&sex=="M", ])
with(subset, name[which.max(n)])
subset <- with(babynames, babynames[year == 1998 & sex =="F"])
subset <- with(babynames, babynames[year == 1998 & sex =="F",])
with(subset, name[max(n)])
with(subset, name[which.max(n)])
subset <- with(babynames, babynames[year == 1920 & sex =="F",])
with(subset, name[which.max(n)])
head(select(babynames, name, year, sex))
install.packages("dplyr")
libary(dplyr)
head(select(babynames, name, year, sex))
library(dplyr)
head(select(babynames, name, year, sex))
filter(babnames, year == 1998 & sex == "F")
filter(babynames, year == 1998 & sex == "F")
filter(babynames, year == 1998)
head(filter(babynames, year == 1998, sex == "M"))
head(filter(babynames, min_rank(n) > 1000))
head(filter(babynames, min_rank(desc(n)) < 5))
mutate(babynames, name = tolower(name))
mutate(babynames, sex_name = paste(sex, name))
arrange(babynames, n)
arrange(babynames, desc(n))
arrange(babynames, desc(n), 10)
head(arrange(babynames, desc(n), 10)
head(arrange(babynames, desc(n)), 10)
head(arrange(babynames, sex, desc(n)), 10)
head(arrange(babynames, year == 2005 & sex == "M"), 5)
filter(babynames, year == 2005 & sex == "M")
filter(babynames, year == 2005 & sex == "M" & min_rank = 5)
filter(babynames, year == 2005 & sex == "M" & min_rank == 5)
filter(babynames, year == 2005 & sex == "M")
filter(babynames, year == 2005 & sex == "M")
arrange(filter(babynames, year == 2005 & sex == "M"), row_number(5))
a <- filter(babynames, sex == "M", year == 2005)
b <- arrange(a, desc(n))
head(b, 5)
a <- filter(babynames, sex == "M", year == 2005)
filter(a, min_rank(desc(n)) == 5)
babynames["sex"]
summarize(babynames, x = max(n))
summarize(babynames, x = max(n), avg = mean(n))
summarize(babynames, x = max(n), avg = mean(n), nl = n(), n_distinct(sex))
summarize(babynames, x = max(n), avg = mean(n), nl = n(), n_distinct(name))
2 %>% sqrt() %>% print()
babynames %>% select(-prop) %>%
filter(year == 1999, sex == "F" %>%
arrange(desc(n)) %>% head()
babynames %>% select(-prop) %>% filter(year == 1999, sex == "F" %>% arrange(desc(n)) %>%  head())
babynames %>% select(-prop) %>% filter(year == 1999, sex == "F" %>% arrange(desc(n)) %>%  head()
babynames %>% select(-prop) %>% filter(year == 1999, sex == "F" %>% arrange(desc(n)) %>%  head()
babynames %>% select(-prop) %>% filter(year == 1999, sex == "F" %>% arrange(desc(n)) %>%  head()
babynames %>% select(-prop) %>% filter(year == 1999, sex == "F" %>% arrange(desc(n)) %>%  head()
babynames %>% select(-prop) %>% filter(year == 1999, sex == "F" %>% arrange(desc(n)) %>% head()
babynames %>% select(-prop) %>% filter(year == 1999, sex == "F" %>% arrange(desc(n)) %>% head()
babynames %>% select(-prop) %>% filter(year == 1999, sex == "F") %>% arrange(desc(n)) %>% head()
babynames %>% select(-prop) %>% filter(year == 1999, sex == "F") %>% arrange(desc(n)) %>% head() %>% .$name
foo().\
foo().\bar().\baz()
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% head() %>% .$name
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% head() %>% .$name[5]
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% head() %>% .$name[4]
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% head() %>% .$name
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% head() %>% .$name
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% filter(row_number == 5)
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% filter(row_number == 5) %>% head()
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% filter(row_number() == 5) %>% head()
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% summarize(n =  name[5]) %>% head()
babynames %>% select(-prop) %>% filter(year == 2005, sex == "M") %>% arrange(desc(n)) %>% filter(min_rank(desc(n)) == 5) %>% head()
babynames %>% select(-prop) %>% group_by(sex) %>% filter(year == 2005) %>% arrange(desc(n)) %>% filter(min_rank(desc(n)) == 5) %>% head()
getwd()
setwd "~/Documents/1 - UDUB/INFO 201/Homework/a3-using-data-muiallen"
setwd (~/Documents/1 - UDUB/INFO 201/Homework/a3-using-data-muiallen)
setwd (~Documents/1 - UDUB/INFO 201/Homework/a3-using-data-muiallen)
setwd (/~/Documents/1 - UDUB/INFO 201/Homework/a3-using-data-muiallen)
setwd (/Documents/1 - UDUB/INFO 201/Homework/a3-using-data-muiallen)
setwd (Documents/1 - UDUB/INFO 201/Homework/a3-using-data-muiallen)
getwd()
setwd(~/Doucments)
setwd(~/Documents)
setwd(Documents)
setwd(~Documents)
setwd(~"Documents)
setwd(~"Documents")
setwd("Documents")
setwd("~Documents")
setwd("~/Documents/1 - UDUB/INFO 201/Homework/a3-using-data-muiallen")
getwd
getwd()
setwd("~/Documents/'1 - UDUB'/'INFO 201'/Homework/a3-using-data-muiallen")
getwd()
base <- "https://api.github.com"org <- "info201-au2018"# can easily switch b/w reposuri <-paste0(base, "/orgs/", org)header <-add_headers(Accept = "application/vnd.github.v3+json")res <- httr::GET(uri, query=list(per_page=3), header)
base <- "https://api.github.com"
org <- "info201-au2018"
uri <- paste(base, "orgs", org, sep="/")
url <- paste(base, "orgs", org, sep="/")
library(httr)
install.packages(httr)
install.packages("httr")
library(httr)
res <- GET(url)
res
res <- GET(uri)
res <- GET(uri)
res
header <- add_headers(Accept = "application/vnd.github.v3+json")
res
res <- GET(uri, query=list(per_page=3), header)
res
http_status(res)
headers(res)
content(res)
content(res, "text")
content(res, "text") %>% jsonlite::fromJSON()
%>%
content(res, "text") %>% jsonlite::fromJSON()
content(res, "text")
install.packages("JSON")
installed.packages("JSON")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
content(res, "text") %>% jsonlite::fromJSON()
list(x=1, y=1:2)
list(x=1, y=1:2) %>% toJSON()
list(x=1, y= 1:2) %>% toJSON()
install.packages("dplyr")
library(dplyr)
list(x=1, y= 1:2) %>% toJSON()
list(x=1, y= 1:2) %>% toJSON()
a <- content(res, "text") %>% fromJSON()
libray(httr)
library(httr)
a <- content(res, "text") %>% fromJSON()
a
uri
base <- "https://canvas.uw.edu/api/v1"
resource <- "courses"
uri <- paste(base,resource, sep="/")
token <- readLines("~/Documents/1 - UDUB/Keys/Class Test Key")
token <- readLines("~/1 - UDUB/Keys/Class Test Key")
token <- readLines("~/'1 - UDUB'/Keys/Class Test Key")
token <- readLines("~/1 - UDUB/Keys/Class Test Key")
token
res <- GET(uri, add_headers(Authorization = paste("Bearer", token)))
res
http(res)
httr(res)
http_status(res)
data <- content(res, "text") %>% fromJSON()
class(data)
names(data)
a <- content(res, "text") %>% fromJSON()
a$description
a
uri
token
uri
base
content(res, "text")
content(res, "text") %>% cat()
data <- content(res, "text") %>% fromJSON()
data
class(data)
data %>% select(name, start_at)
# Install and load the jsonlite package
library(jsonlite)
library(httr)
# Make a variable called "query.parameters" that holds a list of the parameters
# to pass to the API. View the OMDb documentation to see which parameters
# are available.
query_params <- list(i = id, apikey = api_key)
# Use fromJSON to retrieve JSON data from the omdb api using your request.
# Store the result in a variable called movie.data
response <- GET(base_url, query=query_params)
body <- content(response, "text")
movie <- fromJSON(body)
# Install and load the jsonlite package
library(jsonlite)
library(httr)
# Make a variable base.url that has the same base url from the omdb documentation.
# (Hint: visit https://www.omdbapi.com/ to find the base url)
base_url <- "https://www.omdbapi.com/"
id <- "tt3896198"
api_key <- "b65ac83d"
# Make a variable called "query.parameters" that holds a list of the parameters
# to pass to the API. View the OMDb documentation to see which parameters
# are available.
query_params <- list(i = id, apikey = api_key)
# Use fromJSON to retrieve JSON data from the omdb api using your request.
# Store the result in a variable called movie.data
response <- GET(base_url, query=query_params)
body <- content(response, "text")
movie <- fromJSON(body)
# Make movie_data into a data frame using as.data.frame
View(as.data.frame(movie))
iris
cat(nrow(iris, "different flowers/n")
with(iris, plot(Sepal.Length - Sepal.Width, col = Species, pch = 16, cex=2)
### This file contains your main code.
### Feel free to rename it, or split it into several files.
###
### Your final product should contain the code along the following lines:
library(httr)
library(jsonlite)
## 1. create the google civic platform request and httr::GET() the result
##    you need to include your api key in the request.  See the documentation
##    https://developers.google.com/civic-information/
##    https://developers.google.com/civic-information/docs/v2/
##    in particular the reference section.
##
##    Note: you can try the requests by submitting these through your browser by entering the
##    full query (base url, endpoint, query) in your browser's address bar.
##    If it is correct correct, it will display the corresponding JSON data.  If
##    incorrect, you get an error message.
uri <- "https://www.googleapis.com/civicinfo/v2/representatives"
source('~/1 - UDUB/Keys/keys.R')
civic_info_api_key <- google.key
params <- list(key = civic_info_api_key, address = "Seattle")
civic_info_response <- GET(uri, query = params)
View(civic_info_response)
print(civic_info_response)
civic_info_response <- GET(uri, query = params)
query_params <- list(i = id, apikey = api_key)
print(civic_info_response)
params <- list(key=civic_info_api_key, address = "Seattle")
civic_info_response <- GET(uri, query = params)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
officials <- content(civic_info_response)
print(civic_info_response)
## 1. create the google civic platform request and httr::GET() the result
##    you need to include your api key in the request.  See the documentation
##    https://developers.google.com/civic-information/
##    https://developers.google.com/civic-information/docs/v2/
##    in particular the reference section.
##
##    Note: you can try the requests by submitting these through your browser by entering the
##    full query (base url, endpoint, query) in your browser's address bar.
##    If it is correct correct, it will display the corresponding JSON data.  If
##    incorrect, you get an error message.
uri <- "https://www.googleapis.com/civicinfo/v2/representatives"
source('~/1 - UDUB/Keys/keys.R')
civic_info_api_key <- google.key
params <- list(key=civic_info_api_key, address = "Seattle")
source('~/1 - UDUB/Keys/keys.R')
civic_info_api_key <- google.key
params <- list(key = civic_info_api_key, address = "Seattle")
civic_info_response <- GET(uri, query = params)
print(civic_info_response)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
civic_info_body <- content(civic_info_response, "text")
parsed_civic_info <- fromJSON(civic_info_body)
View(parsed_civic_info)
View(as.data.frame(parsed_civic_info))
print(civic_info_response)
civic_info_body
parsed_civic_info
str(parsed_civic_info)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(diamonds)
head(diamonds)
ggplot(diamonds)
ggplots(diamonds) + geom_point(aes(x=carat, y=price))
ggplot(diamonds) + geom_point(aes(x=carat, y=price))
head(economics)
ggplot(economics) + geom_line(aes(x=data, y=uempmed))
ggplot(economics) + geom_line(aes(x=date, y=uempmed))
party <- c(rep("R", rep("D", 20)))
party <- c(rep("R", 10), rep("D", 20)))
party <- c(rep("R", 10), rep("D", 20))
party
politics <- data.frame(party)
politics
ggplot(politics) + geom_bar(aes(party))
ggplot(politics) + geom_histogram(aes(party))
ggplot(politics) + geom_bar(aes(party))
ggplot(politics) + geom_histogram(aes(party), bins = 100)
ggplot(diamonds) + geom_histogram(aes(x=price))
ggplot(politics) + geom_histogram(aes(x=party))
ggplot(diamonds) + geom_histogram(aes(x=price))
ggplot(diamonds) + geom_histogram(aes(x=price), bins = 100)
fr <- map_data("france")
install.packages("maps")
library(maps)
fr <- map_data("france")
head(fr) %>% knitr::kable()
library(dplyr)
head(fr) %>% knitr::kable()
library(ggplot2)
fr <- map_data("france")
head(fr) %>% knitr::kable()
ggplot(fr, aes(long,lat, group=group)) + geom(polygon)
ggplot(fr, aes(long,lat, group=group)) + geom_polygon()
library(ggplot2)
fr <- map_data("france")
head(fr) %>% knitr::kable()
p <- ggplot(fr, aes(long,lat, group=group)) + geom_polygon()
print(p)
p <- ggplot(fr, aes(long,lat, group=group), col="white") + geom_polygon()
print(p)
p <- ggplot(fr, aes(long,lat, group=group), col="white") + geom_polygon()
print(p)
p <- ggplot(fr, aes(long,lat, group=group), col="white")
print(p)
p <- ggplot(fr) + geom_polygon(aes(long,lat, group=group), col="white")
print(p)
us <- map_data("us")
us <- map_data("usa")
head(usa) %>% knitr::kable()
head(us) %>% knitr::kable()
p2 <- ggplot(us) + geom_polygon(aes(long, lat, group=group), col="red")
print(p2)
p <- ggplot(fr) + geom_polygon(aes(long,lat, group=group), col="white")
print(p)
us <- map_data("usa")
head(us) %>% knitr::kable()
p2 <- ggplot(us) + geom_polygon(aes(long, lat, group=group), col="red")
print(p2)
us <- map_data("state")
head(us) %>% knitr::kable()
p2 <- ggplot(us) + geom_polygon(aes(long, lat, group=group), col="red")
print(p2)
p2 <- ggplot(us) + geom_polygon(aes(long, lat, group=group), col="white")
print(p2)
p <- ggplot(us) + geom_polygon(aes(long,lat, group=group), col="red", size = 2)
print(p)
p <- ggplot(us) + geom_polygon(aes(long,lat, group=group), col="red", fill = "green", size = 2)
print(p)
ggplot(politics) + geom_bar(aes(party))
ggplot(politics) + geom_bar(aes(party), fill = party)
ggplot(politics) + geom_bar(aes(party, fill = party))
ggplot(politics) + geom_bar(aes(party, fill = party)) + scale_fill_manual()
ggplot(politics) + geom_bar(aes(party, fill = party)) + scale_fill_manual(values = c("blue", "red"), breaks=c("D", "R"), labels=c("Democratic", "Republican"))
library('ggplot2')
ggplot(data = mpg) + geom_line(mapping=aes(x=displ, y= hwy))
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the column descriptions
# Also check the _column names_ and the _number of rows_ in the data set
?diamonds
# This data set has a lot of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds)
# This data set has a lot of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
ggplot
# This data set has a lot of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
View(diamonds.sample)
View(diamonds.sample)
View(diamonds.sample)
# Start by making a new `ggplot` with the `diamonds.sample` as the data (no geometry yet)
# What do you see?
ggplot(diamonds.sample)
# Draw a scatter plot (with point geometry) with for the `diamonds.sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(diamonds.sample) + geom_point(mapping = (x = carat, y = price))
# Draw a scatter plot (with point geometry) with for the `diamonds.sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(diamonds.sample) + geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their clarity.
ggplot(diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this may take
# a few seconds to generate.
ggplot(diamonds) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds.sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, color = "blue"))
# Draw another scatter plot for `diamonds.sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds.sample) + geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds.sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds.sample) + geom_polygon(mapping = aes(x = carat, y = price, cut = cut))
# Draw a scatter plot for `diamonds.sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds.sample) + geom_polygon(mapping = aes(x = price, y = carat, cut = cut))
shiny::runApp('1 - UDUB/INFO 201/ClassApp')
ggplot(diamonds.sample) + geom_polygon(mapping = aes(x = price, y = carat, cut = cut))
shiny::runApp('1 - UDUB/INFO 201/ClassApp')
runApp('1 - UDUB/INFO 201/Homework/a8-app-muiallen/a8-app')
runApp('1 - UDUB/INFO 201/Homework/a8-app-muiallen/a8-app')
runApp('1 - UDUB/INFO 201/Homework/a8-app-muiallen/a8-app')
shiny::runApp('1 - UDUB/INFO 201/info201-final-project')
runApp('1 - UDUB/INFO 201/info201-final-project')
runApp('1 - UDUB/INFO 201/info201-final-project')
runApp('1 - UDUB/INFO 201/info201-final-project')
runApp('1 - UDUB/INFO 201/info201-final-project')
runApp('1 - UDUB/INFO 201/info201-final-project')
runApp('1 - UDUB/INFO 201/info201-final-project')
runApp('1 - UDUB/INFO 201/info201-final-project')
shiny::runApp('1 - UDUB/INFO 201/info201-final-project')
